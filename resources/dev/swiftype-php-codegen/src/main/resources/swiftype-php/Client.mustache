<?php
/**
 * This file is part of the Swiftype PHP Client package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace {{invokerPackage}};

/**
 * Client implementation.
 *
 * @package Swiftype\AppSearch
 * @author  AurÃ©lien FOUCRET <aurelien.foucret@elastic.co>
 */
class Client
{
    /**
    * @var Connection\Connection
    */
    private $connection;

    /**
     * @var callable
     */
    private $endpointBuilder;

    /**
     * Client constructor.
     *
     * @param callable              $endpointBuilder Allow to access endpoints.
     * @param Connection\Connection $connection      HTTP connection handler.
     */
    public function __construct(callable $endpointBuilder, Connection\Connection $connection)
    {
        $this->endpointBuilder = $endpointBuilder;
        $this->connection      = $connection;
    }

    // phpcs:disable
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
    /**
{{#summary}}
     * {{.}}
     *
{{/summary}}
{{#notes}}
     * {{.}}
     *
{{/notes}}
{{#externalDocs}}
     * Documentation: {{url}}
     *
{{/externalDocs}}
{{#allParams}}
     * @param {{dataType}} ${{paramName}}{{#description}} {{description}}{{/description}}
{{/allParams}}
     *
     * @return array
     */
    public function {{operationId}}({{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
    {
{{#allParams.0}}
        $params = [
            {{#pathParams}}
            '{{baseName}}' => ${{paramName}},
            {{/pathParams}}
            {{#queryParams}}
            '{{baseName}}' => ${{paramName}},
            {{/queryParams}}
        ];
{{/allParams.0}}

        $endpoint = ($this->endpointBuilder)('{{classname}}');
{{#allParams.0}}
        $endpoint->setParams($params);
{{/allParams.0}}
{{#bodyParams.0}}
        $endpoint->setBody(${{paramName}});
{{/bodyParams.0}}

        return $this->performRequest($endpoint);
    }
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
    // phpcs:enable

    private function performRequest(Endpoint\EndpointInterface $endpoint)
    {
        $method  = $endpoint->getMethod();
        $uri     = $endpoint->getURI();
        $params  = $endpoint->getParams();
        $body    = $endpoint->getBody();

        $response = $this->connection->performRequest($method, $uri, $params, $body)->wait();

        return $response['body'] ?? $response;
    }
}
